"Work Space6:ビールの​比較機能​（byかもりゅう）​"
"参考になりそうなサイト"
商品比較機能ガイド&#xff5c;nishikawa&#xff08;西川&#xff09;公式サイト,https://www.nishikawa1566.com/products/howto/
WEB活用術 part 2 ―お気に入り機能・商品比較機能― | スペシャルコンテンツ | タイルメーカーダイナワン&#xff08;DINAONE&#xff09;,https://www.dinaone.co.jp/special/web2-favorite-function/
ザ・ボディショップのEC検索を刷新&#xff01;新機能の商品比較で購入を後押し | GENIEE SEARCH,https://www.bsearchtech.com/news/press/20190725/
"画面幅的にも、情報量的にも、5つ以上の同時比較は難しさそうだと感じた。4つが限界だと思う。"
サポートサイト,https://support.ebisumart.com/ext/function/item_compare.html#section1
スマホサイトの商品の比較機能のUIを集めてみました&#xff5c;UI/UXデザインを得意とするWebサイト制作会社&#xff5c;株式会社ヒカリナ,https://hikarina.co.jp/blog/smartphone_comparisonui/
商品・サービス・機能の比較表,https://u-site.jp/alertbox/comparison-tables
"https://www.biccamera.com/bc/c/service/compare/index.jsp","https://www.biccamera.com/bc/c/service/compare/index.jsp"
"https://www.tanomail.com/dyn/bf/guide/shopping-flow/list/compare.html","https://www.tanomail.com/dyn/bf/guide/shopping-flow/list/compare.html"
"甘口~辛口表記だけではなく、もっと味の特徴をかいてもよいのでＨ"
"商品の画像も追加していきたい"
"比較項目"
"同じ種類のビールであればはじめから、比較している表などを作っても良いのでは"
"・アルコール度数 ・値段 ・内容量 ・味の特徴"
"コードブロック","JavaScript",".compare_btn{
    color: white;
    background-color: black;
    /* font-weight: bold;  */
    font-size: 20px; 
    cursor: pointer;
    border: solid 1px white;
}

.clear_btn{
    color: white;
    background-color: black; 
    /* font-weight: bold;  */
    font-size: 20px;
    margin-right: 15px;
    cursor: pointer;
    border: solid 1px white;    
}

.compare_btn:hover {
    background-color: #555;
}

.clear_btn:hover {
    background-color: #555;
}"
"例"
"https://prtimes.jp/main/html/rd/p/000000582.000001735.html","https://prtimes.jp/main/html/rd/p/000000582.000001735.html"
"購入する際に銘柄やアルコール度数が同じだったため、何が違うのかページを行き来した"
"味の違い風味などが比較されていると購入しやすくなるのではないか"
"同じ種類のビールで何が違うかわかりづらい時がある"
"以前このように書いたので、5つ以上ひかくできないようにした"
"画面幅的にも、情報量的にも、5つ以上の同時比較は難しさそうだと感じた。4つが限界だと思う。"
"uiについて今後より検討していく"
"参考になりそうな比較表"
JavaScriptのsessionStorageの使い方を現役エンジニアが解説【初心者向け】 | TechAcademyマガジン,https://magazine.techacademy.jp/magazine/32870#ta-toc-4
"参考になりそうなuiや比較するまでの導線"
"多くのサイトを見てきたが、商品の比較機能では、チェックボックスで比較したい商品を選択し、選択した商品は画面下に表示される傾向があること気づいた。"
"今後、どのようにbier.jpに応用できるか考えていく。"
"このような比較表になるだろうか、"
"仮のボタンを作った。 今後、比較する商品が二つ以上ある場合、これらのボタンが出現するようにしていく必要がある。"
【初心者でも簡単】sessionStorageでブラウザにデータを保存してみよう【JavaScript】 | 東京のホームページ制作 / WEB制作会社 BRISK,https://b-risk.jp/blog/2021/07/sessionstorage/
"比較する"
"✓"
"比較する"
"✓"
"比較するまでの過程で左の画像にあるようなuiは使えそう。"
"bier.jpにおける比較表は、左のような画像なのかなと思う。"
"値段、概要、生産地やアルコール度数などがメインの比較する対象となると考えられる"
"比較する"
"✓"
"比較する"
"✓"
"コードブロック","JavaScript","function inputChange(e) {
    let item = e.name;
    let url = e.value;
    let img = e.src;
    let compareList = document.getElementById(""compareList"");

    // チェックされた場合
    if (e.checked) {
        // limitedCheck を実行し、追加可能かを確認
        if (!limitedCheck()) {
            e.checked = false; // チェックを強制的に解除
            return; // 処理を終了
        }

        const data = [url, img];
        sessionStorage.setItem(`${item}`, `${data}`);

        document.getElementById(""compareContainer"").style.display = ""block"";

        let child_div = document.createElement('div');
        child_div.className = ""compared_item"";
        child_div.id = item;

        let grandchild_left = document.createElement('div');
        grandchild_left.className = ""compared_left"";

        let grandchild_right = document.createElement('div');
        grandchild_right.className = ""compared_right"";

        compareList.append(child_div);
        child_div.append(grandchild_left);
        child_div.append(grandchild_right);

        let great_grandchild_a_left = document.createElement('a');
        great_grandchild_a_left.href = data[0];
        great_grandchild_a_left.target = ""_blank"";

        let great_grandchild_img = document.createElement('img');
        great_grandchild_img.src = data[1];
        great_grandchild_img.alt = item;

        grandchild_left.append(great_grandchild_a_left);
        great_grandchild_a_left.append(great_grandchild_img);

        let great_grandchild_a_right = document.createElement('a');
        great_grandchild_a_right.href = data[0];
        great_grandchild_a_right.textContent = item;
        great_grandchild_a_right.target = ""_blank"";

        let great_grandchild_p = document.createElement('p');

        grandchild_right.append(great_grandchild_p);
        great_grandchild_p.append(great_grandchild_a_right);

    } else {
        // チェックを外した場合
        sessionStorage.removeItem(`${item}`);
        let removing_child = document.getElementById(`${item}`);
        if (removing_child) {
            removing_child.remove();
        }
        removeCompareContainer();
    }
}

function removeCompareContainer() {
    let compareList = document.getElementById(""compareList"");
    if (!compareList.hasChildNodes()) {
        document.getElementById(""compareContainer"").style.display = ""none"";
    }
}

function limitedCheck() {
    const el = document.getElementsByClassName(""checks"");
    let count = 0;

    // チェックされた数をカウント
    for (let i = 0; i < el.length; i++) {
        if (el[i].checked) {
            count++;
        }
    }

    // 5つ以上チェックされた場合
    if (count > 4) {
        alert(""5つ以上の同時比較はできません。1つチェックを外してください"");
        return false; // 追加不可
    }
    return true; // 追加可能
}"
"コードブロック","JavaScript","let great_grandchild_a_left = document.createElement('a');
        great_grandchild_a_left.href = data[0];
        great_grandchild_a_left.target = ""_blank"";

        let great_grandchild_img = document.createElement('img');
        great_grandchild_img.src = data[1];
        great_grandchild_img.alt = item;

        grandchild_left.append(great_grandchild_a_left);
        great_grandchild_a_left.append(great_grandchild_img);

        let great_grandchild_a_right = document.createElement('a');
        great_grandchild_a_right.href = data[0];
        great_grandchild_a_right.textContent = item;
        great_grandchild_a_right.target = ""_blank"";

        let great_grandchild_p = document.createElement('p');

        grandchild_right.append(great_grandchild_p);
        great_grandchild_p.append(great_grandchild_a_right);

      } else {
        // チェックを外した場合
        sessionStorage.removeItem(item);
        let removing_child = document.getElementById(item);
        if (removing_child) {
          removing_child.remove();
        }
        removeCompareContainer();
      }
    }

    function removeCompareContainer() {
      let compareList = document.getElementById(""compareList"");
      if (!compareList.hasChildNodes()) {
        document.getElementById(""compareContainer"").style.display = ""none"";
      }
    }

    function limitedCheck() {
      const el = document.getElementsByClassName(""checks"");
      let count = 0;

      // チェックされた数をカウント
      for (let i = 0; i < el.length; i++) {
        if (el[i].checked) {
          count++;
        }
      }

      // 5つ以上チェックされた場合
      if (count > 4) {
        alert(""5つ以上の同時比較はできません。1つチェックを外してください"");
        return false; // 追加不可
      }
      return true; // 追加可能
    }

    // ここから追加: 「商品の比較をする」ボタン、「クリア」ボタンの機能
    window.onload = () => {
      const compareBtn = document.getElementById(""compareBtn"");
      const clearBtn   = document.getElementById(""clearBtn"");

      // 「商品の比較をする」ボタン押下時
      compareBtn.addEventListener(""click"", () => {
        // セッションストレージ内のデータを取得
        let items = [];
        for (let i = 0; i < sessionStorage.length; i++) {
          let key = sessionStorage.key(i);
          let value = sessionStorage.getItem(key);
          items.push({ name: key, data: value });
        }

        // 2つ以上チェックされていないと比較にならないので、例としてアラートを出す
        if (items.length < 2) {
          alert(""比較する商品は2つ以上選択してください。"");
          return;
        }
        
        // 比較ページへ移動する例
        // もし compare.html を作る場合はクエリパラメータに商品名やURLを渡すなどして実装してください
        window.open(""compare.html"", ""_blank"");
      });

      // 「クリア」ボタン押下時
      clearBtn.addEventListener(""click"", () => {
        // すべてのチェックを外す
        const checkboxes = document.getElementsByClassName(""checks"");
        for (let i = 0; i < checkboxes.length; i++) {
          checkboxes[i].checked = false;
        }

        // セッションストレージのクリア
        sessionStorage.clear();

        // 比較リストを空にする
        const compareList = document.getElementById(""compareList"");
        while (compareList.firstChild) {
          compareList.removeChild(compareList.firstChild);
        }

        // コンテナを非表示にする
        document.getElementById(""compareContainer"").style.display = ""none"";
      });
    };
  </script>
</body>
</html>"
"コードブロック","JavaScript","<!DOCTYPE html>
<html lang=""ja"">
<head>
  <meta charset=""UTF-8"" />
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/>
  <link rel=""stylesheet"" href=""style.css"" />
  <title>Document</title>
</head>
<body>
  <!-- チェックボックス群 -->
  <input class=""checks"" type=""checkbox"" name=""【※バラ売り】パウラナー・オクトーバーフェストビア【2024】"" 
         value=""https://bier.jp/itemdetail/Fx006i"" 
         src=""https://bier.jp/images/beeroriginal/fx-006.jpg"" 
         onchange=""inputChange(this)"">
  【※バラ売り】パウラナー・オクトーバーフェストビア【2024】

  <input class=""checks"" type=""checkbox"" name=""【※バラ売り】ツム ユーリゲ アルトビール"" 
         value=""https://bier.jp/itemdetail/Cx313i"" 
         src=""https://bier.jp/images/beeroriginal/cx-313.jpg"" 
         onchange=""inputChange(this)"">
  【※バラ売り】ツム ユーリゲ アルトビール

  <input class=""checks"" type=""checkbox"" name=""【※バラ売り】ケストリッツァー シュヴァルツビア"" 
         value=""https://bier.jp/itemdetail/Dx103i"" 
         src=""https://bier.jp/images/beeroriginal/dx-103.jpg"" 
         onchange=""inputChange(this)"">
  【※バラ売り】ケストリッツァー シュヴァルツビア

  <input class=""checks"" type=""checkbox"" name=""【誕生日・ギフトに】ドイツビールギフト8本セット&#xff08;白箱入り&#xff09;"" 
         value=""https://bier.jp/itemdetail/Sx155"" 
         src=""https://bier.jp/images/beeroriginal/sx-155f.jpg"" 
         onchange=""inputChange(this)"">
  【誕生日・ギフトに】ドイツビールギフト8本セット&#xff08;白箱入り&#xff09;

  <input class=""checks"" type=""checkbox"" name=""【※バラ売り】フランチスカーナー へーフェ ヴァイスビア・ドゥンケル"" 
         value=""https://bier.jp/itemdetail/Zx105i"" 
         src=""https://bier.jp/images/beeroriginal/zx-105.jpg"" 
         onchange=""inputChange(this)"">
  【※バラ売り】フランチスカーナー へーフェ ヴァイスビア・ドゥンケル

  <!-- 比較コンテナ&#xff08;最下部に表示される&#xff09; -->
  <div id=""compareContainer"" class=""compare_container"">
    <div id=""upperPart"" class=""upper_part"" style=""color: white; font-weight: bold; font-size: 20px; display: flex; justify-content:space-between;"">
      比較する商品一覧
      <div id=""upperLeftPart"">
        <div id=""startToCompare"" style=""display: flex; gap: 20px;"">
          <!-- ここにIDを付ける -->
          <button id=""compareBtn"" style=""color: white; background-color: black; font-weight: bold; font-size: 20px; cursor: pointer;"">
            商品の比較をする
          </button>
          <button id=""clearBtn"" style=""color: white; background-color: black; font-weight: bold; font-size: 20px; margin-right: 15px; cursor: pointer;"">
            クリア
          </button>
        </div>
      </div>
    </div>
    <div id=""compareList"" class=""compare_list""></div>
  </div>

  <script>
    function inputChange(e) {
      let item = e.name;
      let url = e.value;
      let img = e.src;
      let compareList = document.getElementById(""compareList"");

      // チェックされた場合
      if (e.checked) {
        // limitedCheck を実行し、追加可能かを確認
        if (!limitedCheck()) {
          e.checked = false; // チェックを強制的に解除
          return; // 処理を終了
        }

        const data = [url, img];
        // セッションストレージに記録 (例: key=商品名, value=[URL,IMG] )
        sessionStorage.setItem(item, data);

        // コンテナの表示
        document.getElementById(""compareContainer"").style.display = ""block"";

        // リストに要素を追加
        let child_div = document.createElement('div');
        child_div.className = ""compared_item"";
        child_div.id = item;

        let grandchild_left = document.createElement('div');
        grandchild_left.className = ""compared_left"";

        let grandchild_right = document.createElement('div');
        grandchild_right.className = ""compared_right"";

        compareList.append(child_div);
        child_div.append(grandchild_left);
        child_div.append(grandchild_right);"
"偶然ビールを比較しているサイトを見つけたので共有しておきます。"
【飲み比べ】クラフトビール ギフト 金しゃちビールアソート 330ml 瓶 1セット&#xff08;5種×1本&#xff09; - アスクル,https://www.askul.co.jp/p/EK90356/
"５つ目をチェックするタイミングでアラートを出し、チェックできないように"
"リストのクリア機能を実装。 次は比較のレイアウトを考えていきます"
"次は表形式で比較できるように要素を持ってくる"
"表の幅調整を行った   Todo： ・バツボタンが見切れている ・バツを押すと黒いコンテナは消えてしまう ・黒いコンテナの下部分見切れている"
"https://codepen.io/KK1253867/pen/xbKjdgp","https://codepen.io/KK1253867/pen/xbKjdgp"
"・バツボタンが見切れている 　→位置調整OK ・バツを押すと黒いコンテナは消えてしまう 　→OK ・黒いコンテナの下部分見切れている 　→OK"
"  Todo: ・比較表の下部分、謎に空いてる ・実際、商品名、価格などの情報はどのようにして取る？ ・現在のページに組み込むことを想定して課題を考えていく"
"商品比較コンテナが常に表示されていると邪魔なので隠すことができるボタンを実装。"
"トグルボタンのようにしたい 「＞」ボタン"
"https://codepen.io/KK1253867/pen/xbKjdgp","https://codepen.io/KK1253867/pen/xbKjdgp"
"商品情報のページの情報をJSON形式で取り出すには、下記のURLをGETします。​"
"商品詳細情報を取得​"
"商品URLからitemIDを取得して、APIをたたき、価格情報などを取得できるように。​"
"今はURLがハードコードされている。今後は商品ページからチェックボックスを使い、そのURLからitemIDを取得できるような機能が欲しい。​"
"ビール情報欄の情報量が多い。どのようにして適切な表示を行うか、考え物​"
"はじめの２文でそのビールの特徴がわかると思うので、その2文だけを表示"
"https://bier.jp/index.cgi?t=itemdetail&ItemId=Ox407i&output=json","https://bier.jp/index.cgi?t=itemdetail&ItemId=Ox407i&output=json"
"↓間違いました。下記が正しいパターンです。​"
"コードブロック","JavaScript","/* 一般スタイル */
body {
    font-family: Arial, sans-serif;
    margin: 20px;
}

.product-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.product-list label {
    display: flex;
    align-items: center;
    gap: 10px;
}

/* 比較コンテナ（最下部に表示される） */
.compare_container{
    display: none;
    position: fixed;
    bottom: 0;
    left: 0;
    border: solid 1px black;
    width: 100%;
    height: 20%;
    background-color: rgba(0,0,0,0.8);
    color: white;
    padding: 10px;
    box-sizing: border-box;
}

.buttons {
    display: flex;
    gap: 20px;
}

.btn {
    color: white;
    background-color: #333;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 16px;
    border-radius: 5px;
}

.btn:hover {
    background-color: #555;
}

.compare_list{
    display: flex;
    gap: 15px;
    margin-top: 10px;
    overflow-x: auto;
}

.compare_list a{
    color: white;
    text-decoration: none;
}

.compared_item{
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: rgba(255,255,255,0.1);
    padding: 10px;
    border-radius: 5px;
}

.compared_left img{
    width: 80px;
    height: auto;
    border-radius: 5px;
}

/* 比較結果コンテナ（上部） */
.compare_result {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    max-height: 80%;
    overflow-y: auto;
    background-color: rgba(255, 255, 255, 0.95);
    z-index: 1000;
    padding: 20px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.compare_header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.close_compare {
    font-size: 30px;
    font-weight: bold;
    cursor: pointer;
}

.compare_table_container table {
    width: 100%;
    border-collapse: collapse;
}

.compare_table_container th, .compare_table_container td {
    border: 1px solid #333;
    padding: 10px;
    text-align: center;
}

.compare_table_container th {
    background-color: #f2f2f2;
}

.compare_table_container img {
    width: 80px;
    height: auto;
    border-radius: 5px;
}

/* レスポンシブ対応 */
@media (max-width: 768px) {
    .compare_container {
        height: 30%;
    }

    .compare_table_container table, .compare_table_container th, .compare_table_container td {
        font-size: 12px;
    }

    .btn {
        font-size: 14px;
        padding: 8px 16px;
    }
}"
"https://bier.jp/index.cgi?t=itemdetail&id=Ox407i&output=json","https://bier.jp/index.cgi?t=itemdetail&id=Ox407i&output=json"
"コードブロック","JavaScript","/**
 * チェックボックス変更時の処理
 */
function inputChange(e) {
  let item = e.name;
  let url = e.value;
  let img = e.src;
  let compareList = document.getElementById(""compareList"");

  // チェックされた場合
  if (e.checked) {
    // limitedCheck を実行し、追加可能かを確認
    if (!limitedCheck()) {
      e.checked = false; // チェックを強制的に解除
      return; // 処理を終了
    }

    // セッションストレージにデータを保存
    const data = {
      url: url,
      img: img,
      price: e.getAttribute('data-price'),
      info: e.getAttribute('data-info')
    };
    sessionStorage.setItem(`${item}`, JSON.stringify(data));

    // コンテナを表示
    document.getElementById(""compareContainer"").style.display = ""block"";

    // DOM 生成：下部の「比較する商品一覧」に追加
    let child_div = document.createElement(""div"");
    child_div.className = ""compared_item"";
    child_div.id = item;

    let imgLink = document.createElement(""a"");
    imgLink.href = data.url;
    imgLink.target = ""_blank"";

    let productImg = document.createElement(""img"");
    productImg.src = data.img;
    productImg.alt = item;

    imgLink.appendChild(productImg);
    child_div.appendChild(imgLink);

    let productName = document.createElement(""a"");
    productName.href = data.url;
    productName.textContent = item;
    productName.target = ""_blank"";

    child_div.appendChild(productName);

    compareList.appendChild(child_div);

  } else {
    // チェックを外した場合
    sessionStorage.removeItem(`${item}`);
    let removing_child = document.getElementById(`${item}`);
    if (removing_child) {
      removing_child.remove();
    }
    removeCompareContainer();
  }
}

/**
 * コンテナを非表示にする判定
 */
function removeCompareContainer() {
  let compareList = document.getElementById(""compareList"");
  if (!compareList.hasChildNodes()) {
    document.getElementById(""compareContainer"").style.display = ""none"";
  }
}

/**
 * 同時比較上限チェック (最大 4 つ)
 */
function limitedCheck() {
  const el = document.getElementsByClassName(""checks"");
  let count = 0;
  // チェックされた数をカウント
  for (let i = 0; i < el.length; i++) {
    if (el[i].checked) {
      count++;
    }
  }
  // 5つ以上チェックされた場合
  if (count > 4) {
    alert(""5つ以上の同時比較はできません。1つチェックを外してください"");
    return false; // 追加不可
  }
  return true; // 追加可能
}

/* ===========================================
 * ここから「商品の比較をする」「クリア」ボタンの実装
 * =========================================== */

/**
 * 「商品の比較をする」ボタン押下時の処理
 * → 同じページ上部に比較表を表示
 */
function compareAll() {
  const checks = document.querySelectorAll("".checks"");
  const selectedItems = [];

  // 選択された商品のデータを配列化
  checks.forEach((checkbox) => {
    if (checkbox.checked) {
      const itemName = checkbox.name;
      const itemData = JSON.parse(sessionStorage.getItem(itemName));
      if (itemData) {
        selectedItems.push({ 
          name: itemName, 
          url: itemData.url, 
          img: itemData.img, 
          price: itemData.price, 
          info: itemData.info 
        });
      }
    }
  });

  if (selectedItems.length === 0) {
    alert(""比較する商品が選択されていません。"");
    return;
  }

  // 上部にある比較表示領域を取得
  const compareResultDiv = document.getElementById(""compareResult"");
  compareResultDiv.style.display = ""block""; // 表示
  compareResultDiv.scrollIntoView({ behavior: ""smooth"" }); // スクロール

  const compareTableContainer = document.getElementById(""compareTableContainer"");
  compareTableContainer.innerHTML = """"; // クリア"
"コードブロック","JavaScript","// 比較表を作成
  const table = document.createElement(""table"");

  // テーブルヘッダー
  const thead = document.createElement(""thead"");
  const headerRow = document.createElement(""tr"");
  [""商品画像"", ""商品名"", ""価格"", ""ビール情報"", ""URL""].forEach((title) => {
    const th = document.createElement(""th"");
    th.textContent = title;
    thead.appendChild(th);
  });
  table.appendChild(thead);

  // テーブル本体
  const tbody = document.createElement(""tbody"");

  // 各商品の情報を1行ずつ追加
  selectedItems.forEach((item) => {
    const row = document.createElement(""tr"");

    // 商品画像セル
    const imgCell = document.createElement(""td"");
    const img = document.createElement(""img"");
    img.src = item.img;
    img.alt = item.name;
    img.style.width = ""80px"";
    imgCell.appendChild(img);
    row.appendChild(imgCell);

    // 商品名セル
    const nameCell = document.createElement(""td"");
    const nameLink = document.createElement(""a"");
    nameLink.href = item.url;
    nameLink.textContent = item.name;
    nameLink.target = ""_blank"";
    nameCell.appendChild(nameLink);
    row.appendChild(nameCell);

    // 価格セル
    const priceCell = document.createElement(""td"");
    priceCell.textContent = item.price;
    row.appendChild(priceCell);

    // ビール情報セル
    const infoCell = document.createElement(""td"");
    infoCell.textContent = item.info;
    row.appendChild(infoCell);

    // URLセル
    const urlCell = document.createElement(""td"");
    const urlLink = document.createElement(""a"");
    urlLink.href = item.url;
    urlLink.textContent = ""商品ページ"";
    urlLink.target = ""_blank"";
    urlCell.appendChild(urlLink);
    row.appendChild(urlCell);

    tbody.appendChild(row);
  });

  table.appendChild(tbody);
  compareTableContainer.appendChild(table);
}

/**
 * 「クリア」ボタン押下時の処理
 */
function clearAll() {
  // 1. すべてのチェックボックスをオフにする
  const checks = document.querySelectorAll("".checks"");
  checks.forEach((checkbox) => {
    checkbox.checked = false;
  });

  // 2. セッションストレージをクリアする
  sessionStorage.clear();

  // 3. 下部の比較リスト要素をクリアする
  document.getElementById(""compareList"").innerHTML = """";

  // 4. 比較コンテナを非表示にする
  removeCompareContainer();

  // 5. 上部の比較結果も非表示＆クリア
  const compareResultDiv = document.getElementById(""compareResult"");
  compareResultDiv.style.display = ""none"";
  compareResultDiv.innerHTML = `
    <div class=""compare_header"">
      <h2>商品比較表</h2>
      <span id=""closeCompare"" class=""close_compare"">&times;</span>
    </div>
    <div id=""compareTableContainer"" class=""compare_table_container""></div>
  `;

  // 閉じるボタンのイベントを再設定
  document.getElementById(""closeCompare"").addEventListener(""click"", () => {
    document.getElementById(""compareResult"").style.display = ""none"";
  });
}

/**
 * ページ読み込み時にボタンへイベントを付与
 */
window.addEventListener(""DOMContentLoaded"", () => {
  // 「商品の比較をする」ボタン
  document
    .getElementById(""compareBtn"")
    .addEventListener(""click"", compareAll);

  // 「クリア」ボタン
  document.getElementById(""clearBtn"").addEventListener(""click"", clearAll);

  // 「×」ボタンのイベントを追加
  document.getElementById(""closeCompare"").addEventListener(""click"", () => {
    document.getElementById(""compareResult"").style.display = ""none"";
  });
});"
"コードブロック","JavaScript","<!DOCTYPE html>
<html lang=""ja"">
<head>
  <meta charset=""UTF-8"" />
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/>
  <link rel=""stylesheet"" href=""style.css"" />
  <title>商品比較ページ</title>
</head>
<body>
  <!-- 比較結果表示コンテナ（上部に固定表示） -->
  <div id=""compareResult"" class=""compare_result"" style=""display: none;"">
    <div class=""compare_header"">
      <h2>商品比較表</h2>
      <span id=""closeCompare"" class=""close_compare"">&times;</span>
    </div>
    <div id=""compareTableContainer"" class=""compare_table_container""></div>
  </div>

  <!-- チェックボックス群 -->
  <div class=""product-list"">
    <label>
      <input class=""checks"" type=""checkbox"" name=""【※バラ売り】パウラナー・オクトーバーフェストビア【2024】"" 
             value=""https://bier.jp/itemdetail/Fx006i"" 
             src=""https://bier.jp/images/beeroriginal/fx-006.jpg""
             data-price=""1,500円""
             data-info=""アルコール度数5.5%、ホップの香りが特徴的""
             onchange=""inputChange(this)"">
      【※バラ売り】パウラナー・オクトーバーフェストビア【2024】
    </label>
    
    <label>
      <input class=""checks"" type=""checkbox"" name=""【※バラ売り】ツム ユーリゲ アルトビール"" 
             value=""https://bier.jp/itemdetail/Cx313i"" 
             src=""https://bier.jp/images/beeroriginal/cx-313.jpg""
             data-price=""1,200円""
             data-info=""アルコール度数5.0%、フルーティな味わい""
             onchange=""inputChange(this)"">
      【※バラ売り】ツム ユーリゲ アルトビール
    </label>
    
    <label>
      <input class=""checks"" type=""checkbox"" name=""【※バラ売り】ケストリッツァー シュヴァルツビア"" 
             value=""https://bier.jp/itemdetail/Dx103i"" 
             src=""https://bier.jp/images/beeroriginal/dx-103.jpg""
             data-price=""1,300円""
             data-info=""アルコール度数5.2%、深い味わい""
             onchange=""inputChange(this)"">
      【※バラ売り】ケストリッツァー シュヴァルツビア
    </label>
    
    <label>
      <input class=""checks"" type=""checkbox"" name=""【誕生日・ギフトに】ドイツビールギフト8本セット（白箱入り）"" 
             value=""https://bier.jp/itemdetail/Sx155"" 
             src=""https://bier.jp/images/beeroriginal/sx-155f.jpg""
             data-price=""8,000円""
             data-info=""多種多様なドイツビール8本セット""
             onchange=""inputChange(this)"">
      【誕生日・ギフトに】ドイツビールギフト8本セット（白箱入り）
    </label>
    
    <label>
      <input class=""checks"" type=""checkbox"" name=""【※バラ売り】フランチスカーナー へーフェ ヴァイスビア・ドゥンケル"" 
             value=""https://bier.jp/itemdetail/Zx105i"" 
             src=""https://bier.jp/images/beeroriginal/zx-105.jpg""
             data-price=""1,400円""
             data-info=""アルコール度数5.4%、クリーミーな口当たり""
             onchange=""inputChange(this)"">
      【※バラ売り】フランチスカーナー へーフェ ヴァイスビア・ドゥンケル
    </label>
  </div>

  <!-- 比較コンテナ（最下部に表示される） -->
  <div id=""compareContainer"" class=""compare_container"">
    <div id=""upperPart"" class=""upper_part"">
      比較する商品一覧
      <div id=""upperLeftPart"">
        <div id=""startToCompare"" class=""buttons"">
          <button id=""compareBtn"" class=""btn"">
            商品の比較をする
          </button>
          <button id=""clearBtn"" class=""btn"">
            クリア
          </button>
        </div>
      </div>
    </div>
    <div id=""compareList"" class=""compare_list""></div>
  </div>
  
  <script src=""script.js""></script>
</body>
</html>"
"コードブロック","JavaScript","<!DOCTYPE html>
<html lang=""ja"">
<head>
  <meta charset=""UTF-8"">
  <title>JSON取得のデバッグ</title>
  <style>
    body { font-family: sans-serif; margin: 20px; }
    pre { background-color: #f4f4f4; padding: 10px; border: 1px solid #ccc; }
  </style>
</head>
<body>
  <h1>商品情報</h1>
  <div id=""result"">ロード中...</div>

  <script>
    const url = ""https://bier.jp/index.cgi?t=itemdetail&id=Ox407i&output=json"";

    fetch(url)
      .then(response => response.text())
      .then(text => {
        console.log(""取得したテキスト:"", text);
        if (text.trim() === """") {
          throw new Error(""レスポンスが空です。"");
        }
        try {
          return JSON.parse(text);
        } catch (parseError) {
          console.error(""JSONパースエラー:"", parseError);
          throw new Error(""JSONの形式が不正です。"");
        }
      })
      .then(data => {
        // データを整形して表示
        document.getElementById(""result"").innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
      })
      .catch(error => {
        document.getElementById(""result"").textContent = ""エラーが発生しました: "" + error.message;
        console.error(error);
      });
  </script>
</body>
</html>"
"×ボタンが分かり やすいように調整"
"上すぎる位置になっているが、「ー」ボタンを押すとコンテナが降りる"
"その後「＋」ボタンを押すと再表示。レイアウト調整に取り組んでいきます"
"https://codepen.io/KK1253867/pen/xbKjdgp","https://codepen.io/KK1253867/pen/xbKjdgp"
"コードブロック","JavaScript","async function compareAll() {
  const checks = document.querySelectorAll("".checks"");
  const selectedItems = [];
  for (const checkbox of checks) {
    if (checkbox.checked) {
      const itemName = checkbox.name;
      const storedData = JSON.parse(sessionStorage.getItem(itemName));
      if (storedData) {
        const productId = storedData.url.substring(storedData.url.lastIndexOf('/') + 1);
        const productData = await fetchProductData(productId);
        selectedItems.push({
          name: itemName,
          url: storedData.url,
          img: storedData.img,
          price: productData && productData.Price ? productData.Price : ""取得失敗"",
          // Descriptionを取得して、cleanDescriptionで整形
          description: productData && productData.Description ? productData.Description : ""取得失敗"",
          // ばら売りの場合はNumInBoxが1。セット販売の場合は1以外となる
          numInBox: productData && productData.NumInBox ? productData.NumInBox : 1
        });
      }
    }
  }

  if (selectedItems.length === 0) {
    alert(""比較する商品が選択されていません。"");
    return;
  }

  // 比較結果領域を表示
  const compareResultDiv = document.getElementById(""compareResult"");
  compareResultDiv.style.display = ""block"";
  compareResultDiv.scrollIntoView({ behavior: ""smooth"" });

  const tbody = document.querySelector(""#compareTableContainer table tbody"");
  tbody.innerHTML = """"; // 初期化

  selectedItems.forEach((item) => {
    const row = document.createElement(""tr"");

    // 商品画像
    const imgCell = document.createElement(""td"");
    const img = document.createElement(""img"");
    img.src = item.img;
    img.alt = item.name;
    img.style.width = ""80px"";
    imgCell.appendChild(img);
    row.appendChild(imgCell);

    // 商品名
    const nameCell = document.createElement(""td"");
    const nameLink = document.createElement(""a"");
    nameLink.href = item.url;
    nameLink.textContent = item.name;
    nameLink.target = ""_blank"";
    nameLink.title = item.name;
    nameLink.style.display = ""-webkit-box"";
    nameLink.style.webkitLineClamp = ""3"";
    nameLink.style.webkitBoxOrient = ""vertical"";
    nameLink.style.overflow = ""hidden"";
    nameLink.style.textOverflow = ""ellipsis"";
    nameCell.appendChild(nameLink);
    row.appendChild(nameCell);

    // 価格と1本あたりの価格（API取得）
    const priceCell = document.createElement(""td"");
    // 「取得失敗」でない場合、かつNumInBoxが1以外の場合のみ単価を計算して表示
    if (item.price !== ""取得失敗"" && item.numInBox > 1) {
      // 数値部分のみ取り出して数値化（例：""￥ 2400"" → 2400）
      const salePriceNumeric = parseFloat(item.price.toString().replace(/[^0-9.]/g, ''));
      if (!isNaN(salePriceNumeric)) {
        const unitPrice = salePriceNumeric / item.numInBox;
        // 例：""￥ 2400"" の下に ""(￥ 200)"" を表示
        priceCell.innerHTML = item.price + ""<br>(￥ "" + unitPrice.toFixed(0) + "" /本)"";
      } else {
        priceCell.textContent = item.price;
      }
    } else {
      priceCell.textContent = item.price;
    }
    row.appendChild(priceCell);

    // ビール情報（Descriptionを整形して表示）
    const descCell = document.createElement(""td"");
    const cleanText = cleanDescription(item.description);
    // 改行文字を <br> に変換して innerHTML に設定
    descCell.innerHTML = cleanText.replace(/\n/g, '<br>');
    descCell.title = cleanText;
    row.appendChild(descCell);

    // URL
    const urlCell = document.createElement(""td"");
    const urlLink = document.createElement(""a"");
    urlLink.href = item.url;
    urlLink.textContent = ""商品ページ"";
    urlLink.target = ""_blank"";
    urlLink.rel = ""noopener noreferrer"";
    urlCell.appendChild(urlLink);
    row.appendChild(urlCell);

    tbody.appendChild(row);
  });

  // 比較表表示後、下部比較リストと「比較する」ボタンは非表示
  document.getElementById(""compareBtn"").style.display = ""none"";
  document.getElementById(""compareContainer"").style.display = ""none"";
  document.getElementById(""closeCompare"").focus();
  document.body.style.overflow = 'hidden';
}"
"https://codepen.io/pen/","https://codepen.io/pen/"
"このビールに応じた味のグラフを作成した。組み込もうと思ったが、できなかったので、次回する"
"とりあえず表を表示できるように。 デザインなど手を入れていきますs"
"URLはこれで 取得可能"
"容量も比較できるようにしたい。 JSONにはどうやらない？みたい。beautifulsoupを用いたスクレイピング手法を試す予定です。"
"あとは ・URLを取得 ・IDを抽出して商品画像、商品名を自動更新させたい"
"セット売りの場合、1本あたりの価格を表示できる"
"ギフトパックの場合は微妙かも…？ でも１２本セットの場合、１本あたりの値段がわかるのは便利ではないかと思う"
"<p><br /></p>","JavaScript","const currentUrl = window.location.href;"
"バツボタンの位置を相対から絶対にすることでちょうど良い場所に配置"
"各行に対して幅調整、表示の微調整をおこなった"
"ビールの比較機能の有用性は、ユーザーの体験を向上させる点にあるよ。具体的には以下のようなメリットがある：  ### 1. **新しいビールとの出会いを促進**      - 好きなビールを選ぶだけで、**似た味わいのビール**を提案してくれるので、新しい銘柄を試しやすい。      - 「IPAが好きだけど、他に似たビールは？」といった疑問をすぐに解決。    ### 2. **購入の失敗を減らす**      - ビール選びに失敗するリスクを減らし、**自分の好みに合うビールを選びやすくなる**。      - スーパーやオンラインショップで「どれを買えばいいか分からない」という状況を解消。    ### 3. **専門知識がなくても楽しめる**      - ビール初心者でも、**味の特徴（苦味・甘味・コクなど）に基づいて提案**してもらえるので、自分に合うものを探しやすい。      - バーテンダーやビール専門家の知識がなくても、気軽に比較できる。    ### 4. **ペアリングの幅が広がる**      - 「このビールに合う料理は？」という情報と組み合わせることで、**食事との相性を考えた選択**が可能。      - 例えば「IPAに合う料理を探しているなら、このビールもおすすめ」といった提案ができる。    ### 5. **データを活用したマーケティング・EC連携**      - ユーザーの選んだビールデータを活用し、**ECサイトやバーのメニューでパーソナライズされたおすすめ**を表示できる。      - 「このビールを買った人は、このビールも好きかも」というAmazon的なレコメンドも可能。    この機能があれば、ビール好きだけでなく、初心者やECサイト運営者、飲食店にも役立つね！   さらに拡張するなら、**ユーザーの味覚診断機能** や **ビールのレビュー・評価データと組み合わせた分析** も面白そう。    この機能、どんな場面で活用したい？"
"コードブロック","JavaScript","async function fetchProductCapacity(url) {
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(""ネットワークエラー："" + response.status);
    }
    const text = await response.text();
    const parser = new DOMParser();
    const doc = parser.parseFromString(text, ""text/html"");
    let capacity = ""情報なし"";
    // 「容量」と記載されている<td>の次の<td>から容量情報を取得
    const specRows = doc.querySelectorAll('tr');
    specRows.forEach(row => {
      const cells = row.querySelectorAll('td.spec_column');
      if (cells.length >= 2 && cells[0].textContent.trim() === ""容量"") {
        capacity = cells[1].textContent.replace("":"", """").trim();
      }
    });
    return capacity;
  } catch (error) {
    console.error(""容量の取得に失敗しました:"", error);
    // エラー内容を返す
    return ""エラー: "" + error.message;
  }
}"
"容量情報を追加したい URLからフェッチするのはむずかしそう JSONデータ内には見当たらなかったので別案を考案中"
"コードブロック","JavaScript","import React from 'react';
import { Table, TableHeader, TableBody, TableRow, TableCell } from ""@/components/ui/table"";
import { Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis } from 'recharts';

const beers = [
  {
    id: 1,
    name: ""ヴァイエンシュテファン ヘフェヴァイス"",
    type: ""ヴァイツェン"",
    alcohol: ""5.4%"",
    taste: {
      bitterness: 3,
      sweetness: 4,
      sourness: 2,
      aroma: 5,
      body: 4
    }
  },
  {
    id: 2,
    name: ""パウラナー ヘフェヴァイス"",
    type: ""ヴァイツェン"",
    alcohol: ""5.5%"",
    taste: {
      bitterness: 2,
      sweetness: 5,
      sourness: 3,
      aroma: 4,
      body: 4
    }
  },
  {
    id: 3,
    name: ""エルディンガー ヴァイスビア"",
    type: ""ヴァイツェン"",
    alcohol: ""5.3%"",
    taste: {
      bitterness: 2,
      sweetness: 4,
      sourness: 3,
      aroma: 3,
      body: 3
    }
  }
];

const BeerComparisonTable: React.FC = () => {
  return (
    <div className=""p-4"">
      <Table>
        <TableHeader>
          <TableRow>
            <TableCell>ビール名</TableCell>
            <TableCell>種類</TableCell>
            <TableCell>アルコール度数</TableCell>
            <TableCell>味のプロファイル</TableCell>
          </TableRow>
        </TableHeader>
        <TableBody>
          {beers.map((beer) => (
            <TableRow key={beer.id}>
              <TableCell>{beer.name}</TableCell>
              <TableCell>{beer.type}</TableCell>
              <TableCell>{beer.alcohol}</TableCell>
              <TableCell>
                <RadarChart
                  cx={60}
                  cy={60}
                  outerRadius={40}
                  width={120}
                  height={120}
                  data={[
                    { subject: ""苦味"", value: beer.taste.bitterness },
                    { subject: ""甘み"", value: beer.taste.sweetness },
                    { subject: ""酸味"", value: beer.taste.sourness },
                    { subject: ""香り"", value: beer.taste.aroma },
                    { subject: ""コク"", value: beer.taste.body }
                  ]}
                >
                  <PolarGrid />
                  <PolarAngleAxis dataKey=""subject"" fontSize={10} />
                  <PolarRadiusAxis angle={30} domain={[0, 5]} />
                  <Radar
                    name={beer.name}
                    dataKey=""value""
                    stroke=""#82ca9d""
                    fill=""#82ca9d""
                    fillOpacity={0.6}
                  />
                </RadarChart>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};

export default BeerComparisonTable;"
"ここでもビール毎の味のグラフを比較機能に掲載する事ができれば、言葉では伝わらない違いが分かりやすくなるのでは"
"コードブロック","JavaScript","function cleanDescription(raw) {
  // ① raw内の最初の2つの<br>タグまでの部分を抽出する
  const brRegex = /<br\s*\/?>/gi;
  let truncatedText = raw;
  
  let brCount = 0;
  let lastIndex = 0;
  // 最初の2つの<br>タグの位置を特定し、その位置までのテキストを抽出
  raw.replace(brRegex, (match, offset) => {
    brCount++;
    if (brCount === 2) {
      lastIndex = offset + match.length;
    }
    return match;
  });
  
  if (brCount >= 2) {
    truncatedText = raw.substring(0, lastIndex);
  }
  
  // ② 取得したテキスト内の<br>タグを改行文字 ""\n"" に変換
  let text = truncatedText.replace(brRegex, ""\n"");
  
  // ③ 連続する改行は1回の改行に制限
  text = text.replace(/\n+/g, ""\n"");
  
  // ④ その他のHTMLタグを除去する
  text = text.replace(/<\/?[^>]+(>|$)/g, """");
  
  return text.trim();
}"
"文章取得アルゴリズムを一部変更 二つ目の改行までの出力とすることで簡素化かつ適切な説明情報の記載"
"コードブロック","JavaScript","<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Item Detail & JSON取得のデバッグ</title>
  <style>
    body { font-family: sans-serif; margin: 20px; }
    pre { background-color: #f4f4f4; padding: 10px; border: 1px solid #ccc; }
  </style>
</head>
<body>
  <!-- Item情報表示エリア -->
  <div id=""item-detail"">
    <!-- JSONの取得後に内容を更新します -->
    <h1>ItemID：<span id=""item-id""></span></h1>
    <img id=""itemPhoto"" src="""" alt=""Item Photo"">
  </div>

  <!-- JSON取得のデバッグ表示エリア -->
  <h1>商品情報 (JSON)</h1>
  <div id=""result"">ロード中...</div>

  <script>
    // リンクを書き換えると動的に変更されます
    const link = ""https://bier.jp/itemdetail/Ox301i"";

    // URLオブジェクトからパス部分を取得し、最後のセグメントをItemIDとする
    const urlObj = new URL(link);
    const pathSegments = urlObj.pathname.split(""/"");
    const itemID = pathSegments[pathSegments.length - 1];

    // ItemIDを表示
    document.getElementById(""item-id"").textContent = itemID;

    // JSON取得のデバッグ用URLを作成（テンプレートリテラルでitemIDを埋め込む）
    const jsonUrl = `https://bier.jp/index.cgi?t=itemdetail&id=${itemID}&output=json`;

    fetch(jsonUrl)
      .then(response => response.text())
      .then(text => {
        // console.log(""取得したテキスト:"", text);
        if (text.trim() === """") {
          throw new Error(""レスポンスが空です。"");
        }
        try {
          return JSON.parse(text);
        } catch (parseError) {
          // console.error(""JSONパースエラー:"", parseError);
          throw new Error(""JSONの形式が不正です。"");
        }
      })
      .then(data => {
        // JSONの内容をデバッグ表示エリアに整形して表示
        document.getElementById(""result"").innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;

        // JSONから ""ImagePath"" を取得し、完全な画像URLを作成（ベースURLを付与）
        if(data.ImagePath) {
          const imageUrl = `https://bier.jp${data.ImagePath}`;
          document.getElementById(""itemPhoto"").src = imageUrl;
        } else {
          document.getElementById(""itemPhoto"").alt = ""画像情報が取得できませんでした"";
        }
      })
      .catch(error => {
        document.getElementById(""result"").textContent = ""エラーが発生しました: "" + error.message;
        // console.error(error);
      });
  </script>
</body>
</html>"
"URLを入力すれば必要な情報を抽出できるコード"
"コードブロック","JavaScript","<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Item Detail & JSON取得のデバッグ</title>
  <style>
    body { font-family: sans-serif; margin: 20px; }
    pre { background-color: #f4f4f4; padding: 10px; border: 1px solid #ccc; }
  </style>
</head>
<body>
  <!-- Item情報表示エリア -->
  <div id=""item-detail"">
    <h1>ItemID：<span id=""item-id""></span></h1>
    <!-- 商品名表示 -->
    <h2>商品名：<span id=""item-name""></span></h2>
    <!-- 価格表示 -->
    <h2>価格：<span id=""price""></span></h2>
    <!-- 説明表示（改行対応のためwhite-space: pre-wrapを使用） -->
    <div>
      <h2>説明：</h2>
      <p id=""description"" style=""white-space: pre-wrap;""></p>
    </div>
    <h2>商品画像：</h2>
    <img id=""itemPhoto"" src="""" alt=""Item Photo"">
  </div>

  <!-- JSON取得のデバッグ表示エリア -->
  <h1>商品情報 (JSON)</h1>
  <div id=""result"">ロード中...</div>

  <script>
    // リンクを書き換えると動的に変更されます
    const link = ""https://bier.jp/itemdetail/Ox301i"";

    // URLオブジェクトからパス部分を取得し、最後のセグメントをItemIDとする
    const urlObj = new URL(link);
    const pathSegments = urlObj.pathname.split(""/"");
    const itemID = pathSegments[pathSegments.length - 1];

    // ItemIDを表示
    document.getElementById(""item-id"").textContent = itemID;

    // JSON取得のデバッグ用URLを作成（テンプレートリテラルでitemIDを埋め込む）
    const jsonUrl = `https://bier.jp/index.cgi?t=itemdetail&id=${itemID}&output=json`;

    fetch(jsonUrl)
      .then(response => response.text())
      .then(text => {
        if (text.trim() === """") {
          throw new Error(""レスポンスが空です。"");
        }
        try {
          return JSON.parse(text);
        } catch (parseError) {
          throw new Error(""JSONの形式が不正です。"");
        }
      })
      .then(data => {
        // JSONの内容をデバッグ表示エリアに整形して表示
        document.getElementById(""result"").innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;

        // JSONからImagePathを取得して画像を表示
        if (data.data && data.data.ImagePath) {
          const imageUrl = `https://bier.jp${data.data.ImagePath}`;
          document.getElementById(""itemPhoto"").src = imageUrl;
        } else {
          document.getElementById(""itemPhoto"").alt = ""画像情報が取得できませんでした"";
        }
        
        // JSONからItemNameを取得して表示
        if (data.data && data.data.ItemName) {
          document.getElementById(""item-name"").textContent = data.data.ItemName;
        }
        
        // JSONからPriceを取得して表示
        if (data.data && data.data.Price) {
          document.getElementById(""price"").textContent = data.data.Price;
        }
        
        // JSONからDescriptionを取得して表示（HTMLタグは除去し、最初の2文だけ表示）
        if (data.data && data.data.Description) {
          let desc = data.data.Description;
          // HTMLタグを除去（万が一HTMLタグが含まれていた場合）
          desc = desc.replace(/<[^>]+>/g, '');
          // 改行コードを統一（\r\n を \n に）
          desc = desc.replace(/\r\n/g, '\n');
          // 改行で文章を分割
          let sentences = desc.split('\n');
          // 最初の2文（2つ目の改行までの文章）を抽出
          let output = sentences.slice(0, 2).join('\n');
          document.getElementById(""description"").textContent = output;
        }

      })
      .catch(error => {
        document.getElementById(""result"").textContent = ""エラーが発生しました: "" + error.message;
      });
  </script>
</body>
</html>"
"容量の追加は実装途中"
"現在の表に記載している情報は全部取得してこれた"
"次は実際のページに埋め込むことを考えていく"
"比較機能によく選ばれるビールを記録しても面白い結果が分かりそう"
"容量追加"
"上記のコードには付け加えることができ無かったが、こうした感じで並べれば、見やすくなるのではないか"
"この辺に「リストに追加」ボタンを追加するとする"
"https://bier.jp/itemdetail/Ox301i","https://bier.jp/itemdetail/Ox301i"
"セット商品など、０mlと記載されるところには「セット商品」と記載する予定   それ以外のものがあれば別途記載文言は変更"
